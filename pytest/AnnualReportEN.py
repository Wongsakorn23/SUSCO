# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestAnnualReportEN27666():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def wait_for_window(self, timeout = 2):
    time.sleep(round(timeout / 1000))
    wh_now = self.driver.window_handles
    wh_then = self.vars["window_handles"]
    if len(wh_now) > len(wh_then):
      return set(wh_now).difference(set(wh_then)).pop()
  
  def test_annualReportEN27666(self):
    # Test name: Annual Report EN 27/6/66
    # Step # | name | target | value | comment
    # 1 | open | https://demo.irplus.in.th/Listed/susco/homepage.asp |  | 
    self.driver.get("https://demo.irplus.in.th/Listed/susco/homepage.asp")
    # 2 | setWindowSize | 1936x1056 |  | 
    self.driver.set_window_size(1936, 1056)
    # 3 | click | css=.fa |  | 
    self.driver.find_element(By.CSS_SELECTOR, ".fa").click()
    # 4 | click | linkText=EN |  | 
    self.driver.find_element(By.LINK_TEXT, "EN").click()
    # 5 | click | css=.fa |  | 
    self.driver.find_element(By.CSS_SELECTOR, ".fa").click()
    # 6 | click | linkText=INVESTOR RELATIONS |  | 
    self.driver.find_element(By.LINK_TEXT, "INVESTOR RELATIONS").click()
    # 7 | mouseOver | css=.dropdown-menu-right > li:nth-child(2) > .dropdown-item |  | 
    element = self.driver.find_element(By.CSS_SELECTOR, ".dropdown-menu-right > li:nth-child(2) > .dropdown-item")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    # 8 | click | css=li:nth-child(2) li:nth-child(4) > .dropdown-item |  | 
    self.driver.find_element(By.CSS_SELECTOR, "li:nth-child(2) li:nth-child(4) > .dropdown-item").click()
    # 9 | click | id=slideout-bt |  | 
    self.driver.find_element(By.ID, "slideout-bt").click()
    # 10 | click | linkText=ยอมรับ |  | 
    self.driver.find_element(By.LINK_TEXT, "ยอมรับ").click()
    # 11 | click | linkText=ดาวน์โหลด |  | 
    self.vars["window_handles"] = self.driver.window_handles
    # 12 | storeWindowHandle | root |  | 
    self.driver.find_element(By.LINK_TEXT, "ดาวน์โหลด").click()
    # 13 | selectWindow | handle=${win4736} |  | 
    self.vars["win4736"] = self.wait_for_window(2000)
    # 14 | close |  |  | 
    self.vars["root"] = self.driver.current_window_handle
    # 15 | selectWindow | handle=${root} |  | 
    self.driver.switch_to.window(self.vars["win4736"])
    # 16 | click | css=.col-xl-4:nth-child(2) .btn-annual-report |  | 
    self.driver.close()
    # 17 | selectWindow | handle=${win4246} |  | 
    self.driver.switch_to.window(self.vars["root"])
    # 18 | close |  |  | 
    self.vars["window_handles"] = self.driver.window_handles
    # 19 | selectWindow | handle=${root} |  | 
    self.driver.find_element(By.CSS_SELECTOR, ".col-xl-4:nth-child(2) .btn-annual-report").click()
    self.vars["win4246"] = self.wait_for_window(2000)
    self.driver.switch_to.window(self.vars["win4246"])
    self.driver.close()
    self.driver.switch_to.window(self.vars["root"])
  
